 import * as Bytescale from "@bytescale/sdk";
const uploadManager = new Bytescale.UploadManager({
    apiKey: "public_12a1yo32ypxc9cCHXZj5kuS1ZzDh" // This is your API key.
  });

  const onFileSelected = async event => {
    const file = event.target.files[0];

    try {
      const { fileUrl, filePath } = await uploadManager.upload({

        // Supported types:
        // - String
        // - Blob
        // - ArrayBuffer
        // - File (i.e. from a DOM file input element)
        data: file,

        // ---------
        // Optional:
        // ---------

        // Required if 'data' is a stream. Node.js only. (Not required when uploading files from the browser.)
        // size: 5098, // e.g. fs.statSync("file.txt").size

        // Required if 'data' is a stream, buffer, or string. (Not required for DOM file inputs or blobs.)
        // mime: "application/octet-stream",

        // Required if 'data' is a stream, buffer, or string. (Not required for DOM file inputs or blobs.)
        // originalFileName: "my_file.txt",

        // Reports progress: bytesTotal, bytesSent, progress.
        // onProgress: ({ progress }) => console.log(progress),

        // Controls multipart upload concurrency. Ignored if 'data' is a stream.
        // maxConcurrentUploadParts: 4,

        // Up to 2KB of arbitrary JSON.
        // metadata: {
        //   productId: 60891
        // },

        // Up to 25 tags per file.
        // tags: [
        //   "example_tag"
        // ],

        // About file paths:
        // - Your API key's "file upload path" is used by default, and can be changed by editing the API key's settings.
        // - You can override the API key's file upload path by specifying a path below.
        // - You may use path variables (e.g. "{UTC_DAY}"): https://www.bytescale.com/docs/path-variables
        // path: {
        //   folderPath: "/uploads/{UTC_YEAR}/{UTC_MONTH}/{UTC_DAY}",
        //   fileName: "{UTC_TIME_TOKEN_INVERSE}{UNIQUE_DIGITS_2}{ORIGINAL_FILE_EXT}"
        // },

        // Set to 'isCancelled = true' after invoking 'upload' to cancel the upload.
        // cancellationToken: {
        //   isCancelled: false
        // }
      });

      // --------------------------------------------
      // File successfully uploaded!
      // --------------------------------------------
      // The 'filePath' uniquely identifies the file,
      // and is what you should save to your API.
      // --------------------------------------------
      alert(`File uploaded:\n${fileUrl}`);

    } catch (e) {
      alert(`Error:\n${e.message}`);
    }
  }